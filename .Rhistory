# Variables not of interest removed
# Assuming there is no local variability between countries (UK, Italy, Spain etc.), big assumption though...
train <- subset(train, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL, TRAIN, PRODUCT, GDS, NO_GDS, WEBSITE, SMS))
test <- subset(test, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL, TRAIN, PRODUCT, GDS, NO_GDS, WEBSITE, SMS))
# Export data for Python XGBoost Machine Learning model
write.csv(train, file="train_.csv", row.names = FALSE)
write.csv(test, file="test_.csv", row.names = FALSE)
# "It's difficult to make predictions, especially about the future."
# Niels Bohr, 1920
# Clear workspace variables
rm(list = ls())
cat("\014")
# Set working directory
setwd("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood")
# Load libraries
library(lmtest, pROC, MLmetrics)
# Load in data
train <- read.csv("train.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
test <- read.csv("test.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
# Check for missing data
# length(train[!complete.cases(train),])
# Reformatting data structure types
str(train)
str(test)
train$DISTANCE<- as.numeric(train$DISTANCE)
test$DISTANCE <- as.numeric(test$DISTANCE)
# Create a utility function to help with website extraction using UNIX grep
extractWebsite <- function(name) {
name <- as.character(name)
if (length(grep("ED", name)) > 0) {
return("EDREAMS")
} else if (length(grep("OP", name)) > 0) {
return("OPODO")
} else if (length(grep("GO", name)) > 0) {
return("GO VOYAGE")
} else {
return("OTHER")
}
}
# Run function and clear workspace
COMPANY <- NULL
for (i in 1:nrow(train)) {
COMPANY <- c(COMPANY, extractWebsite(train[i,"WEBSITE"]))
}
train$COMPANY <- as.factor(COMPANY)
COMPANY <- NULL
for (i in 1:nrow(test)) {
COMPANY <- c(COMPANY, extractWebsite(test[i,"WEBSITE"]))
}
test$COMPANY <- as.factor(COMPANY)
rm(COMPANY, i, extractWebsite)
# Create family size variable
FAMILY_SIZE = train$ADULTS + train$CHILDREN + train$INFANTS
train$FAMILY_SIZE <- FAMILY_SIZE
FAMILY_SIZE = test$ADULTS + test$CHILDREN + test$INFANTS
test$FAMILY_SIZE <- FAMILY_SIZE
rm(FAMILY_SIZE)
# Create a utility function to extract if adult is travelling alone
extractAlone <- function(familysize) {
if (familysize > 1) {
return(0)
} else {
return(1)
}
}
# Create is alone variable
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(train[i,"FAMILY_SIZE"]))
}
train$IS_ALONE <- as.factor(IS_ALONE)
train$IS_ALONE <- factor(train$IS_ALONE, levels = c(0,1), labels = c("Not alone", "Alone"))
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(test[i,"FAMILY_SIZE"]))
}
test$IS_ALONE <- as.factor(IS_ALONE)
test$IS_ALONE <- factor(test$IS_ALONE, levels = c(0,1), labels = c("Not alone", "Alone"))
rm(IS_ALONE, i, extractAlone)
# Variables not of interest removed
# Assuming there is no local variability between countries (UK, Italy, Spain etc.), big assumption though...
train <- subset(train, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL, TRAIN, PRODUCT, GDS, NO_GDS, WEBSITE, SMS))
test <- subset(test, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL, TRAIN, PRODUCT, GDS, NO_GDS, WEBSITE, SMS))
# Export data for Python XGBoost Machine Learning model
write.csv(train, file="train_.csv", row.names = FALSE)
write.csv(test, file="test_.csv", row.names = FALSE)
# Clear workspace variables
rm(list = ls())
cat("\014")
# Set working directory
setwd("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood")
# Load libraries
library(lmtest, pROC, MLmetrics)
# "It's difficult to make predictions, especially about the future."
# Niels Bohr, 1920
# Clear workspace variables
rm(list = ls())
cat("\014")
# Set working directory
setwd("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood")
# Load libraries
library(lmtest, pROC, MLmetrics)
# Load in data
train <- read.csv("train.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
test <- read.csv("test.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
# Check for missing data
# length(train[!complete.cases(train),])
# Reformatting data structure types
str(train)
str(test)
train$DISTANCE<- as.numeric(train$DISTANCE)
test$DISTANCE <- as.numeric(test$DISTANCE)
# Create a utility function to help with website extraction using UNIX grep
extractWebsite <- function(name) {
name <- as.character(name)
if (length(grep("ED", name)) > 0) {
return("EDREAMS")
} else if (length(grep("OP", name)) > 0) {
return("OPODO")
} else if (length(grep("GO", name)) > 0) {
return("GO VOYAGE")
} else {
return("OTHER")
}
}
# Run function and clear workspace
COMPANY <- NULL
for (i in 1:nrow(train)) {
COMPANY <- c(COMPANY, extractWebsite(train[i,"WEBSITE"]))
}
train$COMPANY <- as.factor(COMPANY)
COMPANY <- NULL
for (i in 1:nrow(test)) {
COMPANY <- c(COMPANY, extractWebsite(test[i,"WEBSITE"]))
}
test$COMPANY <- as.factor(COMPANY)
rm(COMPANY, i, extractWebsite)
# Create family size variable
FAMILY_SIZE = train$ADULTS + train$CHILDREN + train$INFANTS
train$FAMILY_SIZE <- FAMILY_SIZE
FAMILY_SIZE = test$ADULTS + test$CHILDREN + test$INFANTS
test$FAMILY_SIZE <- FAMILY_SIZE
rm(FAMILY_SIZE)
# Create a utility function to extract if adult is travelling alone
extractAlone <- function(familysize) {
if (familysize > 1) {
return(0)
} else {
return(1)
}
}
# Create is alone variable
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(train[i,"FAMILY_SIZE"]))
}
train$IS_ALONE <- as.factor(IS_ALONE)
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(test[i,"FAMILY_SIZE"]))
}
test$IS_ALONE <- as.factor(IS_ALONE)
rm(IS_ALONE, i, extractAlone)
# Variables not of interest removed
# Assuming there is no local variability between countries (UK, Italy, Spain etc.), big assumption though...
train <- subset(train, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL, TRAIN, PRODUCT, GDS, NO_GDS, WEBSITE, SMS))
test <- subset(test, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL, TRAIN, PRODUCT, GDS, NO_GDS, WEBSITE, SMS))
# Export data for Python XGBoost Machine Learning model
write.csv(train, file="train_.csv", row.names = FALSE)
write.csv(test, file="test_.csv", row.names = FALSE)
?write.csv
# Export data for Python XGBoost Machine Learning model
write.csv(train, file="train_.csv", row.names = FALSE, quote = FALSE)
write.csv(test, file="test_.csv", row.names = FALSE, quote = FALSE)
# "It's difficult to make predictions, especially about the future."
# Niels Bohr, 1920
# Clear workspace variables
rm(list = ls())
cat("\014")
# Set working directory
setwd("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood")
# Load libraries
library(lmtest, pROC, MLmetrics)
# Load in data
train <- read.csv("train.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
test <- read.csv("test.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
# Check for missing data
# length(train[!complete.cases(train),])
# Reformatting data structure types
str(train)
str(test)
train$DISTANCE<- as.numeric(train$DISTANCE)
test$DISTANCE <- as.numeric(test$DISTANCE)
# Create a utility function to help with website extraction using UNIX grep
extractWebsite <- function(name) {
name <- as.character(name)
if (length(grep("ED", name)) > 0) {
return("EDREAMS")
} else if (length(grep("OP", name)) > 0) {
return("OPODO")
} else if (length(grep("GO", name)) > 0) {
return("GO VOYAGE")
} else {
return("OTHER")
}
}
# Run function and clear workspace
COMPANY <- NULL
for (i in 1:nrow(train)) {
COMPANY <- c(COMPANY, extractWebsite(train[i,"WEBSITE"]))
}
train$COMPANY <- as.factor(COMPANY)
COMPANY <- NULL
for (i in 1:nrow(test)) {
COMPANY <- c(COMPANY, extractWebsite(test[i,"WEBSITE"]))
}
test$COMPANY <- as.factor(COMPANY)
rm(COMPANY, i, extractWebsite)
# Create family size variable
FAMILY_SIZE = train$ADULTS + train$CHILDREN + train$INFANTS
train$FAMILY_SIZE <- FAMILY_SIZE
FAMILY_SIZE = test$ADULTS + test$CHILDREN + test$INFANTS
test$FAMILY_SIZE <- FAMILY_SIZE
rm(FAMILY_SIZE)
# Create a utility function to extract if adult is travelling alone
extractAlone <- function(familysize) {
if (familysize > 1) {
return(0)
} else {
return(1)
}
}
# Create is alone variable
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(train[i,"FAMILY_SIZE"]))
}
train$IS_ALONE <- as.factor(IS_ALONE)
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(test[i,"FAMILY_SIZE"]))
}
test$IS_ALONE <- as.factor(IS_ALONE)
rm(IS_ALONE, i, extractAlone)
# Variables not of interest removed
# Assuming there is no local variability between countries (UK, Italy, Spain etc.), big assumption though...
train <- subset(train, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL, TRAIN, PRODUCT, GDS, NO_GDS, WEBSITE, SMS))
test <- subset(test, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL, TRAIN, PRODUCT, GDS, NO_GDS, WEBSITE, SMS))
# Export data for Python XGBoost Machine Learning model
write.csv(train, file="train_xgboost.csv", row.names = FALSE, quote = FALSE)
write.csv(test, file="test_xgboost.csv", row.names = FALSE, quote = FALSE)
hist(train$DISTANCE)
# Create distance category
train$DISTANCE_CAT <- cut(train$DISTANCE, c(0,2000,4000,6000,8000,10000,12000))
str(train$DISTANCE_CAT)
test$DISTANCE_CAT <- cut(test$DISTANCE, c(0,2000,4000,6000,8000,10000,12000))
# "It's difficult to make predictions, especially about the future."
# Niels Bohr, 1920
# Clear workspace variables
rm(list = ls())
cat("\014")
# Set working directory
setwd("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood")
# Load libraries
library(lmtest, pROC, MLmetrics)
# Load in data
train <- read.csv("train.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
test <- read.csv("test.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
# Check for missing data
# length(train[!complete.cases(train),])
# Reformatting data structure types
str(train)
str(test)
train$DISTANCE<- as.numeric(train$DISTANCE)
test$DISTANCE <- as.numeric(test$DISTANCE)
# Create a utility function to help with website extraction using UNIX grep
extractWebsite <- function(name) {
name <- as.character(name)
if (length(grep("ED", name)) > 0) {
return("EDREAMS")
} else if (length(grep("OP", name)) > 0) {
return("OPODO")
} else if (length(grep("GO", name)) > 0) {
return("GO VOYAGE")
} else {
return("OTHER")
}
}
# Run function and clear workspace
COMPANY <- NULL
for (i in 1:nrow(train)) {
COMPANY <- c(COMPANY, extractWebsite(train[i,"WEBSITE"]))
}
train$COMPANY <- as.factor(COMPANY)
COMPANY <- NULL
for (i in 1:nrow(test)) {
COMPANY <- c(COMPANY, extractWebsite(test[i,"WEBSITE"]))
}
test$COMPANY <- as.factor(COMPANY)
rm(COMPANY, i, extractWebsite)
# Create family size variable
FAMILY_SIZE = train$ADULTS + train$CHILDREN + train$INFANTS
train$FAMILY_SIZE <- FAMILY_SIZE
FAMILY_SIZE = test$ADULTS + test$CHILDREN + test$INFANTS
test$FAMILY_SIZE <- FAMILY_SIZE
rm(FAMILY_SIZE)
# Create a utility function to extract if adult is travelling alone
extractAlone <- function(familysize) {
if (familysize > 1) {
return(0)
} else {
return(1)
}
}
# Create is alone variable
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(train[i,"FAMILY_SIZE"]))
}
train$IS_ALONE <- as.factor(IS_ALONE)
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(test[i,"FAMILY_SIZE"]))
}
test$IS_ALONE <- as.factor(IS_ALONE)
rm(IS_ALONE, i, extractAlone)
# Create distance category
train$DISTANCE_CAT <- cut(train$DISTANCE, c(0,2000,4000,6000,8000,10000,12000))
test$DISTANCE_CAT <- cut(test$DISTANCE, c(0,2000,4000,6000,8000,10000,12000))
# Variables not of interest removed
# Assuming there is no local variability between countries (UK, Italy, Spain etc.), big assumption though...
train <- subset(train, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL, TRAIN, PRODUCT, GDS, NO_GDS, WEBSITE, SMS))
test <- subset(test, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL, TRAIN, PRODUCT, GDS, NO_GDS, WEBSITE, SMS))
# Export data for Python XGBoost Machine Learning model
write.csv(train, file="train_xgboost.csv", row.names = FALSE, quote = FALSE)
write.csv(test, file="test_xgboost.csv", row.names = FALSE, quote = FALSE)
View(train)
save.image("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood/data.RData")
# Create distance category
train$DISTANCE_CAT <- cut(train$DISTANCE, c(0,2000,4000,6000,8000,10000,12000), labels = NULL)
test$DISTANCE_CAT <- cut(test$DISTANCE, c(0,2000,4000,6000,8000,10000,12000), labels = NULL)
View(train)
# "It's difficult to make predictions, especially about the future."
# Niels Bohr, 1920
# Clear workspace variables
rm(list = ls())
cat("\014")
# Set working directory
setwd("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood")
# Load libraries
library(lmtest, pROC, MLmetrics)
# Load in data
train <- read.csv("train.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
test <- read.csv("test.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
# Check for missing data
# length(train[!complete.cases(train),])
# Reformatting data structure types
str(train)
str(test)
train$DISTANCE<- as.numeric(train$DISTANCE)
test$DISTANCE <- as.numeric(test$DISTANCE)
# Create a utility function to help with website extraction using UNIX grep
extractWebsite <- function(name) {
name <- as.character(name)
if (length(grep("ED", name)) > 0) {
return("EDREAMS")
} else if (length(grep("OP", name)) > 0) {
return("OPODO")
} else if (length(grep("GO", name)) > 0) {
return("GO VOYAGE")
} else {
return("OTHER")
}
}
# Run function and clear workspace
COMPANY <- NULL
for (i in 1:nrow(train)) {
COMPANY <- c(COMPANY, extractWebsite(train[i,"WEBSITE"]))
}
train$COMPANY <- as.factor(COMPANY)
COMPANY <- NULL
for (i in 1:nrow(test)) {
COMPANY <- c(COMPANY, extractWebsite(test[i,"WEBSITE"]))
}
test$COMPANY <- as.factor(COMPANY)
rm(COMPANY, i, extractWebsite)
# Create family size variable
FAMILY_SIZE = train$ADULTS + train$CHILDREN + train$INFANTS
train$FAMILY_SIZE <- FAMILY_SIZE
FAMILY_SIZE = test$ADULTS + test$CHILDREN + test$INFANTS
test$FAMILY_SIZE <- FAMILY_SIZE
rm(FAMILY_SIZE)
# Create a utility function to extract if adult is travelling alone
extractAlone <- function(familysize) {
if (familysize > 1) {
return(0)
} else {
return(1)
}
}
# Create is alone variable
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(train[i,"FAMILY_SIZE"]))
}
train$IS_ALONE <- as.factor(IS_ALONE)
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(test[i,"FAMILY_SIZE"]))
}
test$IS_ALONE <- as.factor(IS_ALONE)
rm(IS_ALONE, i, extractAlone)
# Create distance category
train$DISTANCE_CAT <- cut(train$DISTANCE, c(0,2000,4000,6000,8000,10000,12000), labels = NULL)
test$DISTANCE_CAT <- cut(test$DISTANCE, c(0,2000,4000,6000,8000,10000,12000), labels = NULL)
View(train)
# Create distance category
train$DISTANCE_CAT <- cut(train$DISTANCE, c(0,2000,4000,6000,8000,10000,12000), labels = FALSE)
test$DISTANCE_CAT <- cut(test$DISTANCE, c(0,2000,4000,6000,8000,10000,12000), labels = FALSE)
# Create distance category
train$DISTANCE_CAT <- cut(train$DISTANCE, c(0,2000,4000,6000,8000,10000,12000,30000), labels = FALSE)
test$DISTANCE_CAT <- cut(test$DISTANCE, c(0,2000,4000,6000,8000,10000,12000,30000), labels = FALSE)
# Create distance category
train$DISTANCE_CAT <- cut(train$DISTANCE, c(0,2000,4000,6000,8000,30000), labels = FALSE)
test$DISTANCE_CAT <- cut(test$DISTANCE, c(0,2000,4000,6000,8000,30000), labels = FALSE)
str(train$DISTANCE_CAT)
View(train)
# Create distance category
train$DISTANCE_CAT <- factor(cut(train$DISTANCE, c(0,2000,4000,6000,8000,30000), labels = FALSE))
test$DISTANCE_CAT <- factor(cut(test$DISTANCE, c(0,2000,4000,6000,8000,30000), labels = FALSE))
str(train$DISTANCE_CAT)
save.image("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood/data.RData")
# "It's difficult to make predictions, especially about the future."
# Niels Bohr, 1920
# Clear workspace variables
rm(list = ls())
cat("\014")
# Set working directory
setwd("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood")
# Load libraries
library(lmtest, pROC, MLmetrics)
# Load in data
train <- read.csv("train.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
test <- read.csv("test.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
# Check for missing data
# length(train[!complete.cases(train),])
# Reformatting data structure types
str(train)
str(test)
train$DISTANCE<- as.numeric(train$DISTANCE)
test$DISTANCE <- as.numeric(test$DISTANCE)
# Create a utility function to help with website extraction using UNIX grep
extractWebsite <- function(name) {
name <- as.character(name)
if (length(grep("ED", name)) > 0) {
return("EDREAMS")
} else if (length(grep("OP", name)) > 0) {
return("OPODO")
} else if (length(grep("GO", name)) > 0) {
return("GO VOYAGE")
} else {
return("OTHER")
}
}
# Run function and clear workspace
COMPANY <- NULL
for (i in 1:nrow(train)) {
COMPANY <- c(COMPANY, extractWebsite(train[i,"WEBSITE"]))
}
train$COMPANY <- as.factor(COMPANY)
COMPANY <- NULL
for (i in 1:nrow(test)) {
COMPANY <- c(COMPANY, extractWebsite(test[i,"WEBSITE"]))
}
test$COMPANY <- as.factor(COMPANY)
rm(COMPANY, i, extractWebsite)
# Create family size variable
FAMILY_SIZE = train$ADULTS + train$CHILDREN + train$INFANTS
train$FAMILY_SIZE <- FAMILY_SIZE
FAMILY_SIZE = test$ADULTS + test$CHILDREN + test$INFANTS
test$FAMILY_SIZE <- FAMILY_SIZE
rm(FAMILY_SIZE)
# Create a utility function to extract if adult is travelling alone
extractAlone <- function(familysize) {
if (familysize > 1) {
return(0)
} else {
return(1)
}
}
# Create is alone variable
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(train[i,"FAMILY_SIZE"]))
}
train$IS_ALONE <- as.factor(IS_ALONE)
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(test[i,"FAMILY_SIZE"]))
}
test$IS_ALONE <- as.factor(IS_ALONE)
rm(IS_ALONE, i, extractAlone)
# Create distance category
train$DISTANCE_CAT <- factor(cut(train$DISTANCE, c(0,2000,4000,6000,8000,30000), labels = FALSE))
test$DISTANCE_CAT <- factor(cut(test$DISTANCE, c(0,2000,4000,6000,8000,30000), labels = FALSE))
# Variables not of interest removed
# Assuming there is no local variability between countries (UK, Italy, Spain etc.), big assumption though...
train <- subset(train, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL, TRAIN, PRODUCT, GDS, NO_GDS, WEBSITE, SMS))
test <- subset(test, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL, TRAIN, PRODUCT, GDS, NO_GDS, WEBSITE, SMS))
# Export data for Python XGBoost Machine Learning model
write.csv(train, file="train_xgboost.csv", row.names = FALSE, quote = FALSE)
write.csv(test, file="test_xgboost.csv", row.names = FALSE, quote = FALSE)
