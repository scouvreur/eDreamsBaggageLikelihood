# Clear workspace variables
rm(list = ls())
cat("\014")
# Set working directory
setwd("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood")
# Load libraries
library(pROC)
# Load in data
train <- read.csv("train.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
test <- read.csv("test.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
View(test)
train$ARRIVAL - train$DEPARTURE
train$ARRIVAL <- as.Date(train$ARRIVAL)
train$ARRIVAL <- as.Date(as.character(train$ARRIVAL))
difftime(train$ARRIVAL, train$DEPARTURE, units = "days")
Date(train$DEPARTURE)
ll
as.Date(train$DEPARTURE)
View(train)
parse_date_time(train$DEPARTURE)
library(lubridate)
install.packages("lubridate")
library("lubridate", lib.loc="/usr/local/lib/R/3.4/site-library")
library("lubridate", lib.loc="/usr/local/lib/R/3.4/site-library")
parse_date_time(train$DEPARTURE)
parse_date_time(train$DEPARTURE, orders = "dmy")
parse_date_time(train$DEPARTURE, orders = "dmy")
parse_date_time(train$DEPARTURE, orders = c("bdy", "bY"))
as.Date(train$DEPARTURE, "%d/%m")
as.Date("22/July", "%d/%m")
as.Date("22/July", "%d/%m")
as.Date("22/July", "%d/%m")
as.Date("22/July", "%d/%b")
test$ARRIVAL <- as.Date(test$ARRIVAL, "%d/%b")
test$DEPARTURE <- as.Date(test$DEPARTURE, "%d/%b")
train$ARRIVAL <- as.Date(train$ARRIVAL, "%d/%b")
train$DEPARTURE <- as.Date(train$DEPARTURE, "%d/%b")
# Clear workspace variables
rm(list = ls())
cat("\014")
# Set working directory
setwd("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood")
# Load libraries
library(pROC)
# Load in data
train <- read.csv("train.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
test <- read.csv("test.csv", header = TRUE, sep = ";", na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
# Fill in any missing values
train$DEVICE[is.na(train$DEVICE)] <- "OTHER"
test$DEVICE[is.na(test$DEVICE)] <- "OTHER"
# Reformatting data structure types
str(train)
str(test)
train$DISTANCE <- as.numeric(train$DISTANCE)
test$DISTANCE <- as.numeric(test$DISTANCE)
train$TRIP_LEN_DAYS <- train$ARRIVAL - train$DEPARTURE
train$TRIP_LEN_DAYS <- difftime(train$ARRIVAL, train$DEPARTURE, units = "days")
train$ARRIVAL <- as.Date(train$ARRIVAL, "%d/%b")
train$DEPARTURE <- as.Date(train$DEPARTURE, "%d/%b")
train$TRIP_LEN_DAYS <- difftime(train$ARRIVAL, train$DEPARTURE, units = "days")
train$TRIP_LEN_DAYS <- abs(difftime(train$ARRIVAL, train$DEPARTURE, units = "days"))
hist(train$TRIP_LEN_DAYS)
train$TRIP_LEN_DAYS <- as.numeric(abs(difftime(train$ARRIVAL, train$DEPARTURE, units = "days")))
hist(train$TRIP_LEN_DAYS)
train$TRIP_LEN_DAYS <- as.integer(abs(difftime(train$ARRIVAL, train$DEPARTURE, units = "days")))
test$ARRIVAL <- as.Date(test$ARRIVAL, "%d/%b")
test$DEPARTURE <- as.Date(test$DEPARTURE, "%d/%b")
test$TRIP_LEN_DAYS <- as.integer(abs(difftime(test$ARRIVAL,
test$DEPARTURE,
units = "days")))
# "It's difficult to make predictions, especially about the future."
# Niels Bohr, 1920
# Clear workspace variables
rm(list = ls())
cat("\014")
# Set working directory
setwd("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood")
# Load libraries
library(pROC)
# Load in data
train <- read.csv("train.csv", header = TRUE, sep = ";",
na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
test <- read.csv("test.csv", header = TRUE, sep = ";",
na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
# Fill in any missing values
train$DEVICE[is.na(train$DEVICE)] <- "OTHER"
test$DEVICE[is.na(test$DEVICE)] <- "OTHER"
# Reformatting data structure types
str(train)
str(test)
train$DISTANCE <- as.numeric(train$DISTANCE)
test$DISTANCE <- as.numeric(test$DISTANCE)
train$ARRIVAL <- as.Date(train$ARRIVAL, "%d/%b")
train$DEPARTURE <- as.Date(train$DEPARTURE, "%d/%b")
train$TRIP_LEN_DAYS <- as.integer(abs(difftime(train$ARRIVAL,
train$DEPARTURE,
units = "days")))
test$ARRIVAL <- as.Date(test$ARRIVAL, "%d/%b")
test$DEPARTURE <- as.Date(test$DEPARTURE, "%d/%b")
test$TRIP_LEN_DAYS <- as.integer(abs(difftime(test$ARRIVAL,
test$DEPARTURE,
units = "days")))
# Create a utility function to help with website extraction using UNIX grep
extractWebsite <- function(name) {
name <- as.character(name)
if (length(grep("ED", name)) > 0) {
return("EDREAMS")
} else if (length(grep("OP", name)) > 0) {
return("OPODO")
} else if (length(grep("GO", name)) > 0) {
return("GO VOYAGE")
} else {
return("OTHER")
}
}
# Run function and clear workspace
COMPANY <- NULL
for (i in 1:nrow(train)) {
COMPANY <- c(COMPANY, extractWebsite(train[i,"WEBSITE"]))
}
train$COMPANY <- as.factor(COMPANY)
COMPANY <- NULL
for (i in 1:nrow(test)) {
COMPANY <- c(COMPANY, extractWebsite(test[i,"WEBSITE"]))
}
test$COMPANY <- as.factor(COMPANY)
rm(COMPANY, i, extractWebsite)
# Create family size variable
FAMILY_SIZE = train$ADULTS + train$CHILDREN + train$INFANTS
train$FAMILY_SIZE <- FAMILY_SIZE
FAMILY_SIZE = test$ADULTS + test$CHILDREN + test$INFANTS
test$FAMILY_SIZE <- FAMILY_SIZE
rm(FAMILY_SIZE)
# Create a utility function to extract if adult is travelling alone
extractAlone <- function(familysize) {
if (familysize > 1) {
return(0)
} else {
return(1)
}
}
# Create is alone variable
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(train[i,"FAMILY_SIZE"]))
}
train$IS_ALONE <- as.factor(IS_ALONE)
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(test[i,"FAMILY_SIZE"]))
}
test$IS_ALONE <- as.factor(IS_ALONE)
rm(IS_ALONE, i, extractAlone)
# Create distance category
train$DISTANCE_CAT <- factor(cut(train$DISTANCE, c(-1,4000,100000), labels = FALSE))
test$DISTANCE_CAT <- factor(cut(test$DISTANCE, c(-1,4000,100000), labels = FALSE))
# Adding labels to dataset
train$EXTRA_BAGGAGE <- factor(train$EXTRA_BAGGAGE,
levels = c("False","True"),
labels = c("No Extra Baggage", "Extra Baggage"))
train$IS_ALONE <- factor(train$IS_ALONE,
levels = c(0,1),
labels = c("Not alone", "Alone"))
test$IS_ALONE <- factor(test$IS_ALONE,
levels = c(0,1),
labels = c("Not alone", "Alone"))
# Variables not of interest removed
# Assuming there is no local variability between countries (UK, Italy, Spain etc.), big assumption though...
train <- subset(train, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL,
TRAIN, PRODUCT, GDS,
NO_GDS, WEBSITE, SMS))
test <- subset(test, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL,
TRAIN, PRODUCT, GDS,
NO_GDS, WEBSITE, SMS))
# Check for missing data
length(train[!complete.cases(train),])
length(test[!complete.cases(test),])
# "It's difficult to make predictions, especially about the future."
# Niels Bohr, 1920
# Clear workspace variables
rm(list = ls())
cat("\014")
# Set working directory
setwd("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood")
# Load libraries
library(pROC)
# Load in data
train <- read.csv("train.csv", header = TRUE, sep = ";",
na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
test <- read.csv("test.csv", header = TRUE, sep = ";",
na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
# Fill in any missing values
train$DEVICE[is.na(train$DEVICE)] <- "OTHER"
test$DEVICE[is.na(test$DEVICE)] <- "OTHER"
# Check for missing data
length(train[!complete.cases(train),])
length(test[!complete.cases(test),])s
# Reformatting data structure types
str(train)
str(test)
train$DISTANCE <- as.numeric(train$DISTANCE)
test$DISTANCE <- as.numeric(test$DISTANCE)
train$ARRIVAL <- as.Date(train$ARRIVAL, "%d/%b")
train$DEPARTURE <- as.Date(train$DEPARTURE, "%d/%b")
train$TRIP_LEN_DAYS <- as.integer(abs(difftime(train$ARRIVAL,
train$DEPARTURE,
units = "days")))
test$ARRIVAL <- as.Date(test$ARRIVAL, "%d/%b")
test$DEPARTURE <- as.Date(test$DEPARTURE, "%d/%b")
test$TRIP_LEN_DAYS <- as.integer(abs(difftime(test$ARRIVAL,
test$DEPARTURE,
units = "days")))
# Create a utility function to help with website extraction using UNIX grep
extractWebsite <- function(name) {
name <- as.character(name)
if (length(grep("ED", name)) > 0) {
return("EDREAMS")
} else if (length(grep("OP", name)) > 0) {
return("OPODO")
} else if (length(grep("GO", name)) > 0) {
return("GO VOYAGE")
} else {
return("OTHER")
}
}
# Run function and clear workspace
COMPANY <- NULL
for (i in 1:nrow(train)) {
COMPANY <- c(COMPANY, extractWebsite(train[i,"WEBSITE"]))
}
train$COMPANY <- as.factor(COMPANY)
COMPANY <- NULL
for (i in 1:nrow(test)) {
COMPANY <- c(COMPANY, extractWebsite(test[i,"WEBSITE"]))
}
test$COMPANY <- as.factor(COMPANY)
rm(COMPANY, i, extractWebsite)
# Create family size variable
FAMILY_SIZE = train$ADULTS + train$CHILDREN + train$INFANTS
train$FAMILY_SIZE <- FAMILY_SIZE
FAMILY_SIZE = test$ADULTS + test$CHILDREN + test$INFANTS
test$FAMILY_SIZE <- FAMILY_SIZE
rm(FAMILY_SIZE)
# Create a utility function to extract if adult is travelling alone
extractAlone <- function(familysize) {
if (familysize > 1) {
return(0)
} else {
return(1)
}
}
# Create is alone variable
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(train[i,"FAMILY_SIZE"]))
}
train$IS_ALONE <- as.factor(IS_ALONE)
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(test[i,"FAMILY_SIZE"]))
}
test$IS_ALONE <- as.factor(IS_ALONE)
rm(IS_ALONE, i, extractAlone)
# Create distance category
train$DISTANCE_CAT <- factor(cut(train$DISTANCE, c(-1,4000,100000), labels = FALSE))
test$DISTANCE_CAT <- factor(cut(test$DISTANCE, c(-1,4000,100000), labels = FALSE))
# Adding labels to dataset
train$EXTRA_BAGGAGE <- factor(train$EXTRA_BAGGAGE,
levels = c("False","True"),
labels = c("No Extra Baggage", "Extra Baggage"))
train$IS_ALONE <- factor(train$IS_ALONE,
levels = c(0,1),
labels = c("Not alone", "Alone"))
test$IS_ALONE <- factor(test$IS_ALONE,
levels = c(0,1),
labels = c("Not alone", "Alone"))
# Variables not of interest removed
# Assuming there is no local variability between countries (UK, Italy, Spain etc.)
# big assumption though...
train <- subset(train, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL,
TRAIN, PRODUCT, GDS,
NO_GDS, WEBSITE, SMS))
test <- subset(test, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL,
TRAIN, PRODUCT, GDS,
NO_GDS, WEBSITE, SMS))
# Export data for Python XGBoost Machine Learning model
write.csv(train, file="train_xgboost.csv", row.names = FALSE, quote = FALSE)
write.csv(test, file="test_xgboost.csv", row.names = FALSE, quote = FALSE)
# 80/20 train/validation set split
validation <- train[40001:50000,]
train <- train[0:40000,]
model <- glm(EXTRA_BAGGAGE ~ factor(HAUL_TYPE) + factor(TRIP_TYPE) +
factor(DISTANCE_CAT) + factor(DEVICE) + factor(COMPANY) +
FAMILY_SIZE + factor(IS_ALONE),
data = train,
family = binomial(link = "logit"))
summary(model)
exp(cbind(odds=coef(model), confint(model)))
prediction <- predict(model, validation, type="response")
rocobj <- roc(factor(validation$EXTRA_BAGGAGE), prediction, ci=TRUE)
plot(roc(factor(validation$EXTRA_BAGGAGE), prediction, ci=TRUE, direction="<"),
col="black",
print.auc=TRUE,
xlab="False Positive Rate",
ylab="True Positive Rate",
main="ROC Curve")
test$EXTRA_BAGGAGE <- predict(model, test, type="response")
write.csv(test[,c("ID","EXTRA_BAGGAGE")], file="submission.csv",
row.names = FALSE, quote = FALSE)
prediction <- predict(model, validation, type="response")
View(validation)
library(ggplot2)
#Sample data
dat <- data.frame(dens = c(rnorm(100), rnorm(100, 10, 5))
, lines = rep(c("a", "b"), each = 100))
#Plot.
ggplot(dat, aes(x = dens, fill = lines)) + geom_density(alpha = 0.5)
#Sample data
dat <- data.frame(dens = c(rnorm(100), rnorm(100, 10, 5))
, lines = rep(c("a", "b"), each = 100))
View(dat)
train$PREDICTION <- predict(model, validation, type="response")
#Plot.
ggplot(train, aes(x = PREDICTION, fill = EXTRA_BAGGAGE)) + geom_density(alpha = 0.5)
hist(train$PREDICTION)
plot(density(train$PREDICTION))
hist(train$PREDICTION)
plot(density(train$PREDICTION))
#Plot.
ggplot(train, aes(x = PREDICTION, fill = EXTRA_BAGGAGE)) + geom_density(alpha = 0.5)
validation$PREDICTION <- predict(model, validation, type="response")
# Plot
ggplot(validation, aes(x = PREDICTION, fill = EXTRA_BAGGAGE)) + geom_density(alpha = 0.5)
# Plot
ggplot(validation, aes(x = PREDICTION, fill = EXTRA_BAGGAGE)))
# Plot
ggplot(validation, aes(x = PREDICTION, fill = EXTRA_BAGGAGE))
# Plot
ggplot(validation, aes(x = PREDICTION, fill = EXTRA_BAGGAGE)) + geom_density(alpha = 1.0)
# Plot
ggplot(validation, aes(x = PREDICTION, fill = EXTRA_BAGGAGE)) + geom_density(alpha = 0.5)
hist(validation$PREDICTION)
plot(density(validation$PREDICTION))
model <- glm(EXTRA_BAGGAGE ~ factor(HAUL_TYPE) + factor(TRIP_TYPE) +
factor(DISTANCE_CAT) + factor(DEVICE) + factor(COMPANY) +
FAMILY_SIZE + factor(IS_ALONE),
data = train,
family = binomial(link = "logit"))
summary(model)
exp(cbind(odds=coef(model), confint(model)))
validation$PREDICTION <- predict(model, validation, type="response")
model <- glm(EXTRA_BAGGAGE ~ factor(HAUL_TYPE) + factor(TRIP_TYPE) +
factor(DISTANCE_CAT) + factor(DEVICE) + factor(COMPANY) +
FAMILY_SIZE + factor(IS_ALONE), TRIP_LEN_DAYS
data = train,
family = binomial(link = "logit"))
model <- glm(EXTRA_BAGGAGE ~ factor(HAUL_TYPE) + factor(TRIP_TYPE) +
factor(DISTANCE_CAT) + factor(DEVICE) + factor(COMPANY) +
FAMILY_SIZE + factor(IS_ALONE), TRIP_LEN_DAYS,
data = train,
family = binomial(link = "logit"))
summary(model)
model <- glm(EXTRA_BAGGAGE ~ factor(HAUL_TYPE) + factor(TRIP_TYPE) +
DISTANCE + factor(DEVICE) + factor(COMPANY) +
FAMILY_SIZE + factor(IS_ALONE), TRIP_LEN_DAYS,
data = train,
family = binomial(link = "logit"))
summary(model)
model <- glm(EXTRA_BAGGAGE ~ factor(HAUL_TYPE) + factor(TRIP_TYPE) +
DISTANCE + factor(DEVICE) + factor(COMPANY) +
FAMILY_SIZE + factor(IS_ALONE) + TRIP_LEN_DAYS,
data = train,
family = binomial(link = "logit"))
summary(model)
validation$PREDICTION <- predict(model, validation, type="response")
# Plot
ggplot(validation, aes(x = PREDICTION, fill = EXTRA_BAGGAGE)) + geom_density(alpha = 0.5)
rocobj <- roc(factor(validation$EXTRA_BAGGAGE), prediction, ci=TRUE)
validation$PREDICTION <- predict(model, validation, type="response")
prediction <- predict(model, validation, type="response")
# Plot
ggplot(validation, aes(x = PREDICTION, fill = EXTRA_BAGGAGE)) + geom_density(alpha = 0.5)
rocobj <- roc(factor(validation$EXTRA_BAGGAGE), prediction, ci=TRUE)
plot(roc(factor(validation$EXTRA_BAGGAGE), prediction, ci=TRUE, direction="<"),
col="black",
print.auc=TRUE,
xlab="False Positive Rate",
ylab="True Positive Rate",
main="ROC Curve")
validation$PREDICTION <- predict(model, validation, type="response")
prediction <- predict(model, validation, type="response")
# Plot
ggplot(validation, aes(x = PREDICTION, fill = EXTRA_BAGGAGE)) + geom_density(alpha = 0.5)
install.packages("xgboost")
# Variables not of interest removed
# Assuming there is no local variability between countries (UK, Italy, Spain etc.)
# big assumption though...
train <- subset(train, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL,
TRAIN, PRODUCT, GDS,
NO_GDS, WEBSITE, SMS))
test <- subset(test, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL,
TRAIN, PRODUCT, GDS,
NO_GDS, WEBSITE, SMS))
# "It's difficult to make predictions, especially about the future."
# Niels Bohr, 1920
# Clear workspace variables
rm(list = ls())
cat("\014")
# Set working directory
setwd("~/Dropbox/Documents/Projects/DataScience/eDreamsBaggageLikelihood")
# Load libraries
library(pROC)
library(ggplot2)
# Load in data
train <- read.csv("train.csv", header = TRUE, sep = ";",
na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
test <- read.csv("test.csv", header = TRUE, sep = ";",
na.strings=c(""," ","NA"), stringsAsFactors = TRUE)
# Fill in any missing values
train$DEVICE[is.na(train$DEVICE)] <- "OTHER"
test$DEVICE[is.na(test$DEVICE)] <- "OTHER"
# Check for missing data
length(train[!complete.cases(train),])
length(test[!complete.cases(test),])s
# Reformatting data structure types
str(train)
str(test)
train$DISTANCE <- as.numeric(train$DISTANCE)
test$DISTANCE <- as.numeric(test$DISTANCE)
train$ARRIVAL <- as.Date(train$ARRIVAL, "%d/%b")
train$DEPARTURE <- as.Date(train$DEPARTURE, "%d/%b")
train$TRIP_LEN_DAYS <- as.integer(abs(difftime(train$ARRIVAL,
train$DEPARTURE,
units = "days")))
test$ARRIVAL <- as.Date(test$ARRIVAL, "%d/%b")
test$DEPARTURE <- as.Date(test$DEPARTURE, "%d/%b")
test$TRIP_LEN_DAYS <- as.integer(abs(difftime(test$ARRIVAL,
test$DEPARTURE,
units = "days")))
# Create a utility function to help with website extraction using UNIX grep
extractWebsite <- function(name) {
name <- as.character(name)
if (length(grep("ED", name)) > 0) {
return("EDREAMS")
} else if (length(grep("OP", name)) > 0) {
return("OPODO")
} else if (length(grep("GO", name)) > 0) {
return("GO VOYAGE")
} else {
return("OTHER")
}
}
# Run function and clear workspace
COMPANY <- NULL
for (i in 1:nrow(train)) {
COMPANY <- c(COMPANY, extractWebsite(train[i,"WEBSITE"]))
}
train$COMPANY <- as.factor(COMPANY)
COMPANY <- NULL
for (i in 1:nrow(test)) {
COMPANY <- c(COMPANY, extractWebsite(test[i,"WEBSITE"]))
}
test$COMPANY <- as.factor(COMPANY)
rm(COMPANY, i, extractWebsite)
# Create family size variable
FAMILY_SIZE = train$ADULTS + train$CHILDREN + train$INFANTS
train$FAMILY_SIZE <- FAMILY_SIZE
FAMILY_SIZE = test$ADULTS + test$CHILDREN + test$INFANTS
test$FAMILY_SIZE <- FAMILY_SIZE
rm(FAMILY_SIZE)
# Create a utility function to extract if adult is travelling alone
extractAlone <- function(familysize) {
if (familysize > 1) {
return(0)
} else {
return(1)
}
}
# Create is alone variable
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(train[i,"FAMILY_SIZE"]))
}
train$IS_ALONE <- as.factor(IS_ALONE)
IS_ALONE <- NULL
for (i in 1:nrow(train)) {
IS_ALONE <- c(IS_ALONE, extractAlone(test[i,"FAMILY_SIZE"]))
}
test$IS_ALONE <- as.factor(IS_ALONE)
rm(IS_ALONE, i, extractAlone)
# Create distance category
train$DISTANCE_CAT <- factor(cut(train$DISTANCE, c(-1,4000,100000), labels = FALSE))
test$DISTANCE_CAT <- factor(cut(test$DISTANCE, c(-1,4000,100000), labels = FALSE))
# Adding labels to dataset
train$EXTRA_BAGGAGE <- factor(train$EXTRA_BAGGAGE,
levels = c("False","True"),
labels = c("No Extra Baggage", "Extra Baggage"))
train$IS_ALONE <- factor(train$IS_ALONE,
levels = c(0,1),
labels = c("Not alone", "Alone"))
test$IS_ALONE <- factor(test$IS_ALONE,
levels = c(0,1),
labels = c("Not alone", "Alone"))
# Variables not of interest removed
# Assuming there is no local variability between countries (UK, Italy, Spain etc.)
# big assumption though...
train <- subset(train, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL,
TRAIN, PRODUCT, GDS,
NO_GDS, WEBSITE, SMS))
test <- subset(test, select = -c(TIMESTAMP, DEPARTURE:ARRIVAL,
TRAIN, PRODUCT, GDS,
NO_GDS, WEBSITE, SMS))
